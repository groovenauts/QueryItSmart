{
  "load": "SELECT key, original_url, rand() as rand FROM `queryit-smart.wikimedia.pd_image_vectors` ORDER BY rand LIMIT 70",
  "similar": "WITH\n  table_a AS (\n  SELECT\n    key,\n    vec,\n    original_url,\n    l_num\n  FROM\n    `queryit-smart.wikimedia_clustered.pd_image_*`,\n    UNNEST(vector) AS vec\n  WITH\n  OFFSET\n    AS l_num),\n  table_b AS (\n  SELECT\n    l_num,\n    vec\n  FROM (\n    SELECT\n      vector\n    FROM\n      ML.PREDICT(MODEL bqml.mobilenetv2,\n        (\n        SELECT\n          image_base64 AS image\n        FROM\n          `wikimedia.key_image_base64`\n        WHERE\n          key = \"<%= id %>\")) ),\n    UNNEST(vector) AS vec\n  WITH\n  OFFSET\n    AS l_num)\n\nSELECT\n  key,\n  original_url,\n  SQRT(pow_data) sqrt_data\nFROM (\n  SELECT\n    a.key,\n    a.original_url,\n    SUM(POW(a.vec - b.vec, 2)) AS pow_data\n  FROM\n    table_a AS a\n  JOIN\n    table_b AS b\n  ON\n    a.l_num = b.l_num\n  GROUP BY\n    key,\n    original_url )\nORDER BY\n  sqrt_data ASC\nLIMIT\n  50",
  "hackerNews": "  CREATE TEMPORARY FUNCTION prod(v1 ARRAY<FLOAT64>,\n    v2 ARRAY<FLOAT64>)\n  RETURNS FLOAT64\n  LANGUAGE js AS \"\"\"\n              var d = 0.0\n              for (var i=0; i < v1.length; i++) {\n                d += (v1[i] * v2[i])\n              }\n              return d;\n            \"\"\";\nSELECT\n  id,\n  prod(a.vector,\n    b.vector) AS similarity,\n  title,\n  text\nFROM (\n  SELECT\n    id,\n    title,\n    text,\n    vector\n  FROM\n    `queryit-smart.hackernews.stories_with_vector`) AS a\nCROSS JOIN (\n  SELECT\n    vector\n  FROM\n    `queryit-smart.hackernews.stories_with_vector`\n  WHERE\n    id = <%= id %>\n  LIMIT\n    1) AS b\nORDER BY\n  similarity DESC\nLIMIT\n  10",
  "stackOverflow": "CREATE TEMPORARY FUNCTION\n  calc_similarity(tf_idf_json_0 STRING,\n    tf_idf_json_1 STRING)\n  RETURNS FLOAT64\n  LANGUAGE js AS \"\"\"\n// parse JSON to extract tf_idf\nvar tf_idf_0 = JSON.parse(tf_idf_json_0);\nvar tf_idf_1 = JSON.parse(tf_idf_json_1);\n// calculate cosine similarity\nvar similarity = 0;\nvar total = 0;\nfor (word in tf_idf_0) {\n  var t0 = tf_idf_0[word] ? Number(tf_idf_0[word]) : 0;\n  var t1 = tf_idf_1[word] ? Number(tf_idf_1[word]) : 0;\n  similarity += (t0 < t1 ? t0 : t1);\n  total += t0;\n}\nreturn similarity/total;\n\"\"\";\nSELECT\n  id,\n  title,\n  body,\n  tags,\n  similarity\nFROM (\n  SELECT\n    t1.id,\n    calc_similarity(tf_idf_0,\n      t1.tf_idf) AS similarity\n  FROM (\n    SELECT\n      tf_idf AS tf_idf_0\n    FROM\n      `queryit-smart.stackoverflow.top10M_posts_tf_idf` AS t0\n    WHERE\n      id = <%= id %> )\n  CROSS JOIN\n    `queryit-smart.stackoverflow.top10M_posts_tf_idf` AS t1)\nJOIN\n  `queryit-smart.stackoverflow.top100K_view_count_posts` AS t2\nUSING\n  (id)\nORDER BY\n  similarity DESC\nLIMIT\n  10",
  "citibike": "SELECT\n  station_id,\n  latitude,\n  longitude,\n  hour,\n  IF(output < 0.0, 0.0, output) AS usage\nFROM\n  ML.PREDICT(MODEL bqml.citibike_prediction,\n    (\n    SELECT\n    <%= month %> AS month,\n    <%= wday %> AS wday,\n    hour,\n    CAST(station_id AS STRING) AS station_id,\n    latitude,\n    longitude,\n    <%= temp %> AS temp,\n    \"<%= weather %>\" AS weather\n    FROM\n      `queryit-smart.citibike.stations_hours_with_stub`))"
}
